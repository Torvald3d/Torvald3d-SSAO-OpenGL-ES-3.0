#version 300 es
precision highp float;

const int SAMPLES = 12;

uniform sampler2D normBuff;
uniform sampler2D posBuff;
uniform sampler2D depthBuff;
uniform sampler2D randMap;
uniform sampler2D ssaoMask;
uniform vec2 scr;
uniform float aspect;
uniform vec3 rndTable[SAMPLES];
uniform mat4 proj;
uniform mat4 i_proj;

layout(location = 0) out vec3 outColor;

in vec2 texCoord;

/*const float totStrength = 1.38;
const float strength = 0.07;
const float offset = 18.0;
const float falloff = 0.000002;
const float rad = 0.008;
const float invSamples = -1.0/float(SAMPLES);*/

/*void main(void) {
	//vec3 pSphere[10] = vec3[](vec3(-0.010735935, 0.01647018, 0.0062425877),vec3(-0.06533369, 0.3647007, -0.13746321),vec3(-0.6539235, -0.016726388, -0.53000957),vec3(0.40958285, 0.0052428036, -0.5591124),vec3(-0.1465366, 0.09899267, 0.15571679),vec3(-0.44122112, -0.5458797, 0.04912532),vec3(0.03755566, -0.10961345, -0.33040273),vec3(0.019100213, 0.29652783, 0.066237666),vec3(0.8765323, 0.011236004, 0.28265962),vec3(0.29264435, -0.40794238, 0.15964167));

	vec2 rnd = texture(randMap, texCoord*scr).xy*2.0-1.0;
	vec2 rnd2 = vec2(-rnd.y, rnd.x);
	vec3 norm = texture(normBuff, texCoord).xyz*2.0-1.0;
	float currentPixelDepth = texture(depthBuff, texCoord).x;
	vec3 ep = vec3(texCoord, currentPixelDepth);
	float bl = 0.0;
	float radD = rad/currentPixelDepth;
	float occluderDepth, depthDifference, currentDepth;
	vec4 occluderFragment;
	vec3 shift;

	for (int i=0; i<SAMPLES; i++) {
		shift.x = rndTable[i].x*rnd.x+rndTable[i].y*rnd2.x;
		shift.y = rndTable[i].x*rnd.y+rndTable[i].y*rnd2.y;
		//shift.xy = texCoord + sign(dot(shift, norm))*shift.xy*radD;
		shift.xy = texCoord + shift.xy*radD;
		occluderFragment = texture(normBuff, shift.xy)*2.0-1.0;
		currentDepth = texture(depthBuff, shift.xy).x;
		depthDifference = currentPixelDepth-currentDepth;
		bl += step(falloff, depthDifference)*(1.0-dot(occluderFragment.xyz, norm))*
		(1.0-smoothstep(falloff, strength, depthDifference));
		//bl += 1.0-dot(occluderFragment.xyz, norm);
	}

	outColor = vec3(pow(1.0+bl*invSamples, 2.0));
}*/

/*float linearizeDepth(in float depth, in mat4 projMatrix) {
	return projMatrix[3][2] / (projMatrix[2][2]-depth);
	//float n = 1.0; // camera z near
	//float f = 40.0; // camera z far
	//float z = depth;
	//return (2.0 * n) / (f + n - z * (f - n));
}*/

void main() {
	//float k = texture(ssaoMask, texCoord).r;
	//if (k==1.0)
	//	discard;

	/*float radius = 0.5;
	float depth = texture(depthBuff, texCoord).x;
	vec4 pos = vec4(texCoord, depth, 1.0);
	pos.xyz = pos.xyz*2.0-1.0;
	pos = i_proj*pos;
	pos.xyz /= pos.w;

	vec3 normal = texture(normBuff, texCoord).xyz*2.0-1.0;
	//normal.z = -normal.z;
	vec3 rnd = texture(randMap, texCoord*scr).xyz*2.0-1.0;

	vec3 tangent = cross(normal, rnd);
	vec3 bitangent = cross(normal, tangent);
	mat3 rot = mat3(tangent, bitangent, normal);

	float a = 0.0;
	for (int i=0; i<SAMPLES; i++) {
		vec3 smpl = rndTable[i]*rot;
		vec3 perp = cross(smpl, normal);

		smpl = normal*abs(rndTable[i].x)+perp*abs(rndTable[i].y);
		smpl = normalize(smpl)*abs(rndTable[i].z)*radius;
		smpl += pos.xyz;

		vec4 shift = vec4(smpl, 1.0);
		shift = proj*shift;
		shift.xyz /= shift.w;
		shift.xyz = shift.xyz*0.5+0.5;

		float smplDepth = texture(depthBuff, shift.xy).x;
		shift = vec4(shift.xy, smplDepth, 1.0);
		shift.xyz = shift.xyz*2.0-1.0;
		shift = i_proj*shift;
		shift /= shift.w;

		//a += step(pos.z, shift.z);
		//a += step(smpl.z, shift.z);
		if (shift.z >= smpl.z) {
			float rangeCheck = abs(pos.z - shift.z) < radius ? 1.0 : 0.0;
			a += rangeCheck;
		}
	}

	outColor = vec3(1.0-a/float(SAMPLES));*/
	//outColor = normal*0.5+0.5;
/*
	//vec3 rvec = texture(randMap, texCoord*scr).xyz*2.0-1.0;
	vec3 ax = vec3(0.0, 0.0, -1.0);
	vec3 tangent = normalize(ax - normal * dot(ax, normal));
	//vec3 tangent = cross(normal, vec3(0.0, 0.0, 1.0));
	vec3 bitangent = cross(tangent, normal);
	mat3 tbn = mat3(tangent, bitangent, normal);

	vec3 z = vec3(0.0, 0.0, 1.0);
	z = z*tbn;

	pos = pos*proj;
	pos.xyz /= pos.w;

	outColor = z.xyz*0.5+0.5;*/
	//outColor = normal.xyz*0.5+0.5;

	const float kernel_radius = 0.1;

	vec3 normal = texture(normBuff, texCoord).xyz*2.0-1.0;
	//normal.z = -normal.z;
	float depth = texture(depthBuff, texCoord).x;
	//depth = linearizeDepth(depth, proj);
	vec4 projected_pos = vec4(texCoord, depth, 1.0);
	projected_pos.xyz = projected_pos.xyz*2.0-1.0;
	vec4 pos = i_proj * projected_pos;
	pos /= pos.w;
	vec3 rvec = texture(randMap, texCoord*scr).xyz*2.0-1.0;

	vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
	vec3 bitangent = cross(tangent, normal);
	mat3 tbn = mat3(tangent, bitangent, normal);

	vec4 offset;
	vec3 shift;
	float sample_depth;
	float occlusion = 0.0;
	for (int i=0; i<SAMPLES; i++) {
		shift = (tbn * rndTable[i]) * kernel_radius;
		//shift = shift*(1.0-depth) + pos.xyz;
		shift = shift + pos.xyz;

		offset = vec4(shift, 1.0);
		offset = proj * offset; // In the range -w, w
		offset /= offset.w; // in the range -1, 1
		offset.xyz = offset.xyz * 0.5 + 0.5;

		sample_depth = texture(depthBuff, offset.xy).x;
		//sample_depth = linearizeDepth(sample_depth, proj);
		//vec4 throwaway = vec4(offset.xy, 0.0005+sample_depth, 1.0); // range 0, 1
		vec4 throwaway = vec4(offset.xy, sample_depth, 1.0); // range 0, 1
		throwaway.xyz = throwaway.xyz * 2.0 - 1.0;
		throwaway = i_proj * throwaway;
		throwaway /= throwaway.w;

		if (throwaway.z >= shift.z) {
			float rangeCheck = abs(pos.z - throwaway.z) < kernel_radius ? 1.0 : 0.0;
			occlusion += 1.0 * rangeCheck;
		}
	}

	outColor = vec3(pow(1.0 - occlusion/float(SAMPLES), 2.0));
	//outColor = vec3(-pos.z/5.0);
	//outColor = normal*0.5+0.5;
}

/*const float radius = 0.2;

	float depth = 1.0-texture(depthBuff, texCoord).x;
	vec2 rnd = texture(randMap, texCoord*scr).xy*2.0-1.0;
	vec2 rnd2 = vec2(-rnd.y, rnd.x);
	float acc = 0.0;
	vec2 shift;
	for (int i=0; i<SAMPLES; i++) {
		shift.x = rndTable[i].x*rnd.x+rndTable[i].y*rnd2.x;
		shift.y = rndTable[i].x*rnd.y+rndTable[i].y*rnd2.y;
		shift *= radius*depth;
		float z = 1.0-texture(depthBuff, texCoord+shift).x;
		float s = rndTable[i].z*distance(shift, vec2(0.0));
		float dz = depth-z;
		acc += step(dz, s)*step(abs(dz), radius*depth);
	}
	outColor.x = 1.0 - acc/float(SAMPLES);*/


/*void main() {
	const float filterRadius = 0.03;

	float depth = texture(depthBuff, texCoord).x;
	vec4 viewPos = vec4(texCoord, depth, 1.0);
	viewPos.xyz = viewPos.xyz*2.0-1.0;
	viewPos = i_proj * viewPos;
	viewPos /= viewPos.w;

	vec3 viewNormal = texture(normBuff, texCoord).xyz * 2.0 - 1.0;
	float ambientOcclusion = 0.0;
	for (int i=0; i<SAMPLES; i++) {
		vec2 sampleTexCoord = texCoord + (rndTable[i].xy * (filterRadius));
		float sampleDepth = texture(depthBuff, sampleTexCoord).r;
		vec4 samplePos = vec4(sampleTexCoord, 0.0005+sampleDepth, 1.0); //calculatePosition(sampleTexCoord, sampleDepth * 2 - 1);
		samplePos.xyz = samplePos.xyz*2.0-1.0;
		samplePos = i_proj * samplePos;
		samplePos /= samplePos.w;
		vec3 sampleDir = normalize(samplePos.xyz - viewPos.xyz);

		float NdotS = max(dot(viewNormal, sampleDir), 0.0);
		float VPdistSP = distance(viewPos.xyz, samplePos.xyz);

		float a = 1.0;// - smoothstep(distanceThreshold, distanceThreshold * 2, VPdistSP);
		float b = NdotS;

		ambientOcclusion += (a * b);
	}

	outColor = vec3(1.0 - ambientOcclusion/float(SAMPLES));
	//outColor = vec3(-viewPos.z/1.0);
}*/


/*
const float totStrength = 1.38;
const float strength = 0.07;
const float offset = 18.0;
const float falloff = 0.000002;
const float rad = 0.012;
const float invSamples = -1.38/float(SAMPLES);

vec3 fres = normalize(texture(randMap, texCoord*scr).xyz*2.0-1.0);
vec4 currentPixelSample = texture(normBuff, texCoord)*2.0-1.0;
float currentPixelDepth = texture(depthBuff, texCoord).x;

vec3 ep = vec3(texCoord, currentPixelDepth);
vec3 norm = currentPixelSample.xyz;
float bl = 0.0;
float radD = rad/currentPixelDepth;

float occluderDepth, depthDifference;
vec4 occluderFragment;
vec3 ray;
for(int i=0; i<SAMPLES; i++) {
	ray = radD*reflect(rndTable[i],fres);

	vec2 shift = ep.xy + sign(dot(ray, norm))*ray.xy;
	occluderFragment = texture(normBuff, shift)*2.0-1.0;
	depthDifference = currentPixelDepth-texture(depthBuff, shift).x;

	bl += step(falloff,depthDifference)*(1.0-dot(occluderFragment.xyz,norm))
			*(1.0-smoothstep(falloff,strength,depthDifference));
}

outColor.r = 1.0+bl*invSamples;*/



/*const float kernel_radius = 0.2;

vec3 normal = texture(normBuff, texCoord).xyz*2.0-1.0;
float depth = texture(depthBuff, texCoord).x;
float z = depth*2.0-1.0;
vec4 projected_pos = vec4(texCoord.x*2.0-1.0, texCoord.y*2.0-1.0, z, 1.0);
vec4 pos = i_proj * projected_pos;
pos /= pos.w;
vec3 rvec = texture(randMap, texCoord*scr).xyz*2.0-1.0;

vec3 tangent = normalize(rvec - normal * dot(rvec, normal));
vec3 bitangent = cross(normal, tangent);
mat3 tbn = mat3(tangent, bitangent, normal);

vec4 offset;
vec3 shift;
float sample_depth;
float occlusion = 0.0;
for (int i=0; i<SAMPLES; i++) {
	shift = (tbn * rndTable[i]) * kernel_radius;
	shift = shift + pos.xyz;

	offset = vec4(shift, 1.0);
	offset = proj * offset; // In the range -w, w
	offset /= offset.w; // in the range -1, 1
	offset.xyz = offset.xyz * 0.5 + 0.5;

	sample_depth = texture(depthBuff, offset.xy).x;
	vec4 throwaway = vec4(offset.xy, sample_depth, 1.0); // range 0, 1
	throwaway.xyz = throwaway.xyz * 2.0 - 1.0;
	throwaway = i_proj * throwaway;
	throwaway /= throwaway.w;

	if (throwaway.z >= shift.z) {
		float rangeCheck = abs(pos.z - throwaway.z) < kernel_radius ? 1.0 : 0.0;
		occlusion += 1.0 * rangeCheck;
	}
}

outColor = vec3(1.0 - occlusion/float(SAMPLES));*/
